Example 2: 64. Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. 
Return this sum. You can only move down or right.
* int minSum = move(m - 1, n - 1) + grid[m - 1][n - 1]
* move(0, 0) = 0
* move(row, col) = min(move(row - 1, col), move(row, col - 1)) + grid[row][col]
* moveCache = int[m][n];

Problem: Unique Paths II
You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]).
The robot can only move either down or right at any point in time.
An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The testcases are generated so that the answer will be less than or equal to 2 * 109.
* int uniquePaths = paths(m -1, n -1)
* paths(0, 0) = grid[0][0] == 1 ? 0 : 1
* paths(row, col) = grid[row - 1, col] == 1 ? 0 : paths(row - 1, col) + grid[row, col - 1] == 1 ? 0 : paths(row, col - 1)
* cache = int[m][n]

Problem: Minimum Falling Path Sum
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).
* int minSum = min(minPath(n - 1, 0),...,minPath(n - 1, n - 1))
* minPath(0, col) = matrix[0][col]
* minPath(row, col) = min(minPath(row - 1, col - 1), minPath(row - 1, col), minPath(row - 1, col + 1)) + matrix[row][col]
* cache = int[n][n]
